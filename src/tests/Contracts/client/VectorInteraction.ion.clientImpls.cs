//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace TestContracts;

[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed class Ion_VectorMathInteraction_ClientImpl(IonClientContext context) : IVectorMathInteraction
{
    
    private static readonly Lazy<MethodInfo> Abs_Ref = new(() =>
        typeof(IVectorMathInteraction).GetMethod(nameof(Abs), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> Add_Ref = new(() =>
        typeof(IVectorMathInteraction).GetMethod(nameof(Add), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> AndNot_Ref = new(() =>
        typeof(IVectorMathInteraction).GetMethod(nameof(AndNot), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> Clamp_Ref = new(() =>
        typeof(IVectorMathInteraction).GetMethod(nameof(Clamp), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> Do_Ref = new(() =>
        typeof(IVectorMathInteraction).GetMethod(nameof(Do), BindingFlags.Public | BindingFlags.Instance)!);


    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<Vector> Abs(Vector __leftoperand)
    {
        var req = new IonRequest(context, typeof(IVectorMathInteraction), Abs_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 1;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<Vector>.Write(writer, __leftoperand);
        
        writer.WriteEndArray();
    
        return await req.CallAsync<Vector>(writer.Encode());
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<Vector> Add(Vector __leftoperand, Vector __rightoperand)
    {
        var req = new IonRequest(context, typeof(IVectorMathInteraction), Add_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 2;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<Vector>.Write(writer, __leftoperand);
        IonFormatterStorage<Vector>.Write(writer, __rightoperand);
        
        writer.WriteEndArray();
    
        return await req.CallAsync<Vector>(writer.Encode());
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<Vector> AndNot(Vector __leftoperand, Vector __rightoperand)
    {
        var req = new IonRequest(context, typeof(IVectorMathInteraction), AndNot_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 2;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<Vector>.Write(writer, __leftoperand);
        IonFormatterStorage<Vector>.Write(writer, __rightoperand);
        
        writer.WriteEndArray();
    
        return await req.CallAsync<Vector>(writer.Encode());
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<Vector> Clamp(Vector __leftoperand, Vector __min, Vector __max)
    {
        var req = new IonRequest(context, typeof(IVectorMathInteraction), Clamp_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 3;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<Vector>.Write(writer, __leftoperand);
        IonFormatterStorage<Vector>.Write(writer, __min);
        IonFormatterStorage<Vector>.Write(writer, __max);
        
        writer.WriteEndArray();
    
        return await req.CallAsync<Vector>(writer.Encode());
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<VectorOfVectorOfVector> Do(Vector __leftoperand)
    {
        var req = new IonRequest(context, typeof(IVectorMathInteraction), Do_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 1;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<Vector>.Write(writer, __leftoperand);
        
        writer.WriteEndArray();
    
        return await req.CallAsync<VectorOfVectorOfVector>(writer.Encode());
    }

}

