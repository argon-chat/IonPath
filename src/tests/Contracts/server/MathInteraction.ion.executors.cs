//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace TestContracts;

public sealed class Ion_MathInteraction_ServiceExecutor(AsyncServiceScope scope) : IServiceExecutorRouter
{
    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task Add_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IMathInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __leftoperand = IonFormatterStorage<i4>.Read(reader);
        var __rightoperand = IonFormatterStorage<i4>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.Add(__leftoperand, __rightoperand);
        
        IonFormatterStorage<i4>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task Mul_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IMathInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __leftoperand = IonFormatterStorage<i4>.Read(reader);
        var __rightoperand = IonFormatterStorage<i4>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.Mul(__leftoperand, __rightoperand);
        
        IonFormatterStorage<i4>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task Sub_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IMathInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __leftoperand = IonFormatterStorage<i4>.Read(reader);
        var __rightoperand = IonFormatterStorage<i4>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.Sub(__leftoperand, __rightoperand);
        
        IonFormatterStorage<i4>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task Div_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IMathInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __leftoperand = IonFormatterStorage<i4>.Read(reader);
        var __rightoperand = IonFormatterStorage<i4>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.Div(__leftoperand, __rightoperand);
        
        IonFormatterStorage<i4>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task Pow_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IMathInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __leftoperand = IonFormatterStorage<i4>.Read(reader);
        var __rightoperand = IonFormatterStorage<i4>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.Pow(__leftoperand, __rightoperand);
        
        IonFormatterStorage<i4>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task PowArray_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IMathInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __leftoperand = IonFormatterStorage<i4>.Read(reader);
        var __rightoperand = IonFormatterStorage<i4>.ReadArray(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.PowArray(__leftoperand, __rightoperand);
        
        IonFormatterStorage<i4>.WriteArray(writer, result);
    }

    
    
    
        public Task RouteExecuteAsync(string methodName, CborReader reader, CborWriter writer)
    {
        
        if (methodName.Equals("Add", StringComparison.InvariantCultureIgnoreCase))
            return Add_Execute(reader, writer);
        if (methodName.Equals("Mul", StringComparison.InvariantCultureIgnoreCase))
            return Mul_Execute(reader, writer);
        if (methodName.Equals("Sub", StringComparison.InvariantCultureIgnoreCase))
            return Sub_Execute(reader, writer);
        if (methodName.Equals("Div", StringComparison.InvariantCultureIgnoreCase))
            return Div_Execute(reader, writer);
        if (methodName.Equals("Pow", StringComparison.InvariantCultureIgnoreCase))
            return Pow_Execute(reader, writer);
        if (methodName.Equals("PowArray", StringComparison.InvariantCultureIgnoreCase))
            return PowArray_Execute(reader, writer);

        
        throw new InvalidOperationException("no method defined");
    }
}

public sealed class Ion_RandomStreamInteraction_ServiceExecutor(AsyncServiceScope scope) : IServiceStreamExecutorRouter
{
    
    public async IAsyncEnumerable<Memory<byte>> Integer_Execute(CborReader reader)
    {
        var service = scope.ServiceProvider.GetRequiredService<IRandomStreamInteraction>();

        const int argumentSize = 1;

        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
            
        var __seed = IonFormatterStorage<i4>.Read(reader);

        reader.ReadEndArrayAndSkip(arraySize - argumentSize);

        await foreach (var e in service.Integer(__seed))
        {
            var writer = new CborWriter();

            IonFormatterStorage<i4>.Write(writer, e);

            var mem = MemoryPool<byte>.Shared.Rent(writer.BytesWritten);

            writer.Encode(mem.Memory.Span);

            yield return mem.Memory;

            mem.Dispose();
        }
    }

    
        public IAsyncEnumerable<Memory<byte>> StreamRouteExecuteAsync(string methodName, CborReader reader, [EnumeratorCancellation] CancellationToken ct)
    {
        
        if (methodName.Equals("Integer", StringComparison.InvariantCultureIgnoreCase))
            return Integer_Execute(reader);

        
        throw new InvalidOperationException("no method defined");
    }
    
    
}

