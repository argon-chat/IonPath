//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace TestContracts;

[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed class Ion_VectorMathInteraction_ServiceExecutor(AsyncServiceScope scope) : IServiceExecutorRouter
{
    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task Abs_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IVectorMathInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray();
    
        if (arraySize is null)
            throw new InvalidOperationException();
        if (argumentSize != arraySize)
            throw new InvalidOperationException();
        var __leftoperand = IonFormatterStorage<Vector>.Read(reader);
    
        reader.ReadEndArray();
    
        var result = await service.Abs(__leftoperand);
        
        IonFormatterStorage<Vector>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task Add_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IVectorMathInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray();
    
        if (arraySize is null)
            throw new InvalidOperationException();
        if (argumentSize != arraySize)
            throw new InvalidOperationException();
        var __leftoperand = IonFormatterStorage<Vector>.Read(reader);
        var __rightoperand = IonFormatterStorage<Vector>.Read(reader);
    
        reader.ReadEndArray();
    
        var result = await service.Add(__leftoperand, __rightoperand);
        
        IonFormatterStorage<Vector>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task AndNot_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IVectorMathInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray();
    
        if (arraySize is null)
            throw new InvalidOperationException();
        if (argumentSize != arraySize)
            throw new InvalidOperationException();
        var __leftoperand = IonFormatterStorage<Vector>.Read(reader);
        var __rightoperand = IonFormatterStorage<Vector>.Read(reader);
    
        reader.ReadEndArray();
    
        var result = await service.AndNot(__leftoperand, __rightoperand);
        
        IonFormatterStorage<Vector>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task Clamp_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IVectorMathInteraction>();
    
        const int argumentSize = 3;
    
        var arraySize = reader.ReadStartArray();
    
        if (arraySize is null)
            throw new InvalidOperationException();
        if (argumentSize != arraySize)
            throw new InvalidOperationException();
        var __leftoperand = IonFormatterStorage<Vector>.Read(reader);
        var __min = IonFormatterStorage<Vector>.Read(reader);
        var __max = IonFormatterStorage<Vector>.Read(reader);
    
        reader.ReadEndArray();
    
        var result = await service.Clamp(__leftoperand, __min, __max);
        
        IonFormatterStorage<Vector>.Write(writer, result);
    }

    
    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public Task RouteExecuteAsync(string methodName, CborReader reader, CborWriter writer)
    {
        
        if (methodName.Equals("Abs", StringComparison.InvariantCultureIgnoreCase))
            return Abs_Execute(reader, writer);
        if (methodName.Equals("Add", StringComparison.InvariantCultureIgnoreCase))
            return Add_Execute(reader, writer);
        if (methodName.Equals("AndNot", StringComparison.InvariantCultureIgnoreCase))
            return AndNot_Execute(reader, writer);
        if (methodName.Equals("Clamp", StringComparison.InvariantCultureIgnoreCase))
            return Clamp_Execute(reader, writer);

        
        throw new InvalidOperationException("no method defined");
    }
}

